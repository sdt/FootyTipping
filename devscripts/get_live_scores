#!/usr/bin/env perl
use Modern::Perl::5_14;

use IO::String;
use WWW::Mechanize;

sub get_url_fh {
    my ($url) = @_;
    my $www = WWW::Mechanize->new;
    return unless $www->get($url);
    return IO::String->new($www->content);
}

sub parse_game_urls {
    my ($fh) = @_;

    my %urls;

    while (my $line = <$fh>) {
        given ($line) {

            when (m{<a href="game(\d).php" rel="#iframe"(?: class="selected")?>([A-Z]{3}) v ([A-Z]{3})</a></li>}) {
                my ($rel, $home, $away) = ($1, $2, $3);
                $urls{$rel} = "$home vs $away";
            }
        }
    }

    return %urls;
}

sub parse_score_urls {
    my ($fh) = @_;

    my (@home, @away, $status);

    while (my $line = <$fh>) {
        given ($line) {
            when (m{<div class="scores".*>(.*)</div>}) {
                push(@home, $1);
            }
            when (m{<div class="scores-away".*>(.*)</div>}) {
                push(@away, $1);
            }
            when (m{^<b>(Upcoming)</b>}) {
                $status = $1;
            }
            when (m{^<b>(.*)</b><br />(.+)}) {
                $status = "$1 $2";
            }
            when (m{^<b>(.*)</b>}) {
                $status = $1;
            }
        }
    }

    say join(" ", @home);
    say join(" ", @away);
    say $status;
}

my $base_url = 'http://www.aflonline.com.au/livescores/2011/';
my $game = shift @ARGV;
if (defined $game) {
    if (my $fh = get_url_fh($base_url . 'g' . $game . '.php')) {
        parse_score_urls($fh);
        exit 0;
    }
}

my %urls = parse_game_urls(get_url_fh($base_url));
for my $gameid (sort keys %urls) {
    my $teams = $urls{$gameid};
    say "Game $gameid: $teams";
}
